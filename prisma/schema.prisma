generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  group       Group?
  @@map(name: "categories")
}

model Group {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  category_id Int       @unique
  category    Category  @relation(fields: [category_id], references: [id])
  article     Article?
  @@map(name: "groups")
}

model Article {
  id          Int       @id @default(autoincrement())
  name        String
  content     String
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  author_id   Int
  group_id    Int       @unique
  author      User      @relation(fields: [author_id], references: [id])
  group       Group     @relation(fields: [group_id], references: [id])
  post        Post?
  @@map(name: "articles")
}

model Post {
  id          Int       @id @default(autoincrement())
  name        String
  content     String
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  article_id  Int       @unique
  author_id   Int
  article     Article   @relation(fields: [article_id], references: [id])
  author      User      @relation(fields: [author_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  notes       Note[]
  resources   Resource[]
  snippets    Snippet[]
  @@map(name: "posts")
}

model Resource {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  url         String
  author_id   Int
  post_id     Int
  author      User    @relation(fields: [author_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  post        Post    @relation(fields: [post_id], references: [id])
  @@map(name: "resources")
}

model Snippet {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  content     String
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  author_id   Int
  post_id     Int
  author      User      @relation(fields: [author_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  post        Post      @relation(fields: [post_id], references: [id])
  @@map(name: "snippets")
}

model Note {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  content     String
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  author_id   Int
  post_id     Int
  author      User      @relation(fields: [author_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  post        Post      @relation(fields: [post_id], references: [id])
  @@map(name: "notes")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  articles      Article[]
  posts         Post[]
  resources     Resource[]
  snippets      Snippet[]
  notes         Note[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
